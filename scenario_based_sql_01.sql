########## Scenario Based SQL Problem Solving ( Real World Interview Question find on Internet ) ##########

# Top 5 Customers with Highest Order Amount
with cte as (
  select 
    CustomerName, 
    round(
      sum(OrderAmount), 
      0
    ) as OrderAmount, 
    dense_rank() over(
      order by 
        round(
          sum(OrderAmount), 
          0
        ) desc
    ) as rn 
  from 
    CustomerOrders 
  group by 
    CustomerName
) 
select 
  CustomerName, 
  OrderAmount 
from 
  cte 
where 
  rn <= 5;
  
# Top employee in each department based on their sales performance
# Total Sales Amount in each Department
select 
  employee_name, 
  department, 
  sales_amount, 
  dense_rank() over(
    partition by department 
    order by 
      sales_amount desc
  ) as top_seller, 
  sum(sales_amount) over(partition by department) as total_amount 
from 
  emp;
  
# Total revenue generated by each customer in Feb, 2023
select 
  c.customer_id, 
  c.customer_name,
  sum(o.total_amount) as total_revenue 
from 
  customers c 
  join orders o on c.customer_id = o.customer_id 
where 
  year(o.order_date) = 2023 
  and month(o.order_date) = 2 
group by 
  c.customer_id, 
  c.customer_name;

# Find the avg salary since the hire year 2015. Output sholud contain year and avg salary column only
SELECT 
    YEAR(HireDate) AS HireYear,
    ROUND(AVG(salary), 0) AS AverageSalary
FROM
    Employees
WHERE
    YEAR(HireDate) >= 2015
GROUP BY HireYear
ORDER BY HireYear;

# Customer who spent more than 500 and order status is completed
SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    SUM(o.total_amount) AS total_spending
FROM
    customer c
        JOIN
    orders o ON c.customer_id = o.customer_id
WHERE
    o.status = 'completed'
GROUP BY c.customer_id , customer_name
HAVING total_spending > 500;

# Find which books are due (due_date > current date)
SELECT 
    CONCAT(a.first_name, ' ', a.last_name) AS AuthorName,
    b.title AS BookName,
    CONCAT(m.first_name, ' ', m.last_name) AS MemberName,
    bl.loan_date AS LoanDate,
    bl.due_date AS DueDate
FROM
    authors a
        JOIN
    books b ON a.author_id = b.author_id
        JOIN
    book_loans bl ON bl.book_id = b.book_id
        JOIN
    members m ON m.member_id = bl.member_id
WHERE
    bl.due_date > CURDATE();





























